你是一位專業的技術文件撰寫者，請根據 Git 提交歷史生成一份結構化的 CHANGELOG.md。

## 專案資訊
- 專案名稱：{{projectName}}
- 版本：{{version}}
- 發布日期：{{date}}

## Git 提交歷史
{{gitHistory}}

## 輸出要求
請生成一份遵循 [Keep a Changelog](https://keepachangelog.com/) 標準的 CHANGELOG.md，包含：

### 📋 格式要求
- 使用 Markdown 格式
- 按時間倒序排列（最新在上）
- 每個版本包含發布日期
- 變更按類型分組

### 🏷️ 變更類型分類
將提交訊息分類到以下類別：

#### ✨ Added (新增)
- 新功能
- 新的 API 端點
- 新的配置選項

#### 🔧 Changed (變更)
- 現有功能的修改
- API 變更
- 行為改變

#### 🗑️ Deprecated (棄用)
- 即將移除的功能
- 不建議使用的 API

#### 🚫 Removed (移除)
- 已刪除的功能
- 已移除的 API

#### 🐛 Fixed (修復)
- Bug 修復
- 安全性修復
- 效能問題修復

#### 🔒 Security (安全性)
- 安全性相關的變更
- 漏洞修復

### 📝 格式範例
```markdown
# Changelog

All notable changes to this project will be documented in this file.

## [{{version}}] - {{date}}

### ✨ Added
- 新功能描述

### 🔧 Changed
- 變更描述

### 🐛 Fixed
- 修復描述

### 🔒 Security
- 安全性修復描述
```

## 處理指南
1. **提取關鍵資訊**：從 commit 訊息中提取實際的功能變更
2. **使用者視角**：以使用者能理解的語言描述變更
3. **避免技術細節**：專注於功能影響而非實作細節
4. **保持一致性**：使用統一的語調和格式
5. **連結相關資訊**：如果可能，包含 PR 或 Issue 連結

請根據提供的 Git 歷史生成專業的變更日誌，確保內容對使用者有價值且易於理解。
